# Default values for steadybit-platform.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
platform:
  # platform.name -- Used to identify the platform when running multiple installations (e.g. in a multi-stage setup). Should be omitted when using a single installation.
  name: null
  tenant:
    mode: "ONPREM"
    # platform.tenant.key -- Name for the tenant assigned to you.
    key: onprem
    # platform.tenant.name -- Key for the tenant assigned to you.
    name: onprem
    # -- The secret token which your agent uses to authenticate to steadybit's servers.  Get it from https://platform.steadybit.io/settings/agents/setup.
    agentKey: null
    agent:
      auth:
        # platform.tenant.agent.auth.provider -- Default is `agent-key`. Use `oauth2` if you like to use oauth2 authenication
        provider: agent-key
        oauth2:
          issuerUri: null
  # platform.uiPort -- (internal) Web-UI port for the user interface.
  uiPort: 80
  # platform.publicWebUrl -- The url where users can access the platform via browser. For example in our SaaS: https://platform.steadybit.com
  publicWebUrl: null
  # platform.websocketPort -- (internal) Websocket port for communication between platform and agents.
  websocketPort: 7878
  # platform.publicWebsocketPort -- The public port used for experiments - Use this if the agent access the websocket via ingress or a reverse proxy, that serves websocket and http traffic using the same port
  publicWebsocketPort: 80
  # platform.ingressOrigin -- Should be set to the ingress origin, e.g., https://ingress.steadybit.example.com. Will be used to construct URLs in HTTP responses to agents. This configuration will overwrite the port defined in platform.publicWebsocketPort
  ingressOrigin: null
  # -- Use this to set additional environment variables See https://docs.steadybit.com/install-and-configure/install-on-prem-platform/advanced-configuration
  envFrom: []
  env:
    - name: STEADYBIT_AUTH_PROVIDER
      value: "static"
    - name: STEADYBIT_AUTH_STATIC_0_USERNAME
      value: "admin"
    - name: STEADYBIT_AUTH_STATIC_0_PASSWORD
      value: "{noop}admin"
  # platform.extraLabels -- Additional labels
  extraLabels: {}
  # platform.extraVolumes -- Additional volumes to which the platform container will be mounted.
  extraVolumes: []
  # platform.extraVolumeMounts -- Additional volumeMounts to which the platform container will be mounted.
  extraVolumeMounts: []
  logging:
    format: text
  service:
    ## platform.service.type -- Type for the service to use
    type: LoadBalancer
  portSplit:
    # platform.portSplit.enabled -- Can be set to "true" to change the service and ingress definition in such a way that the ports are split by purpose, i.e., an ingress and a separate egress port. This comes in handy when hardening deployments / to improve package routing.
    enabled: false
  replicas: 1
  rolloutStrategy: Recreate
  minReadySeconds: 60
  maxUnavailable: 0
  maxSurge: 2
  # platform.prometheus.scrape -- Controls the `prometheus.io/scrape` pod annotation which controls whether Prometheus will automatically scrape metrics from platform pods.
  prometheus:
    scrape: true
  database:
    migration:
      # platform.database.migration.useInitContainer -- Should database migration be executed in an init container? (you may want to reduce `platform.startupProbe.initialDelaySeconds` (10) and `platform.startupProbe.failureThreshold` (12) in this case)
      useInitContainer: false

  ## platform.readinessProbe.* -- Configuration of the Kubernetes readinessProbe probe for the platform deployment
  readinessProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1

  ## platform.startupProbe.* -- Configuration of the Kubernetes startup probe for the platform deployment
  startupProbe:
    enabled: true
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 200
    successThreshold: 1

  ## platform.livenessProbe.* -- Configuration of the Kubernetes liveness probe for the platform deployment
  livenessProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 5
    successThreshold: 1

  ## platform.proxy.* -- Proxy configuration used for outgoing http calls of the platform
  proxy:
    host: null
    port: null
    protocol: HTTP
    user: null
    password: null
  ## platform.terminationGracePeriodSeconds -- The time in seconds to wait for the platform to gracefully terminate and complete running experiments before it is forcefully terminated.
  terminationGracePeriodSeconds: 43200 # 12 hours
  ## The interval in seconds to check for experiment executions during shutdown
  experimentExecutionShutdownCheckInterval: 10

image:
  # image.name -- The container image  to use of the steadybit platform.
  name: docker.steadybit.io/steadybit/platform
  # image.tag -- Tag name of the platform container image to use.
  tag: null
  # image.pullPolicy -- Specifies when to pull the image container.
  pullPolicy: Always
  registry: {}
  pullSecrets: []

serviceAccount:
  # serviceAccount.create -- Specifies whether a ServiceAccount should be created.
  create: true
  # serviceAccount.name -- The name of the ServiceAccount to use.
  # If not set and `create` is true, a name is generated using the fullname template.
  name: null
  # serviceAccount.annotations.* -- Annotations for the service account
  annotations: {}

# podAnnotations -- Additional annotations to be added to the platform pod.
podAnnotations: {}

# -- Ingress configuration properties
ingress:
  enabled: true
  annotations: {}
  hosts: []
  # - platform.steadybit.local


# -- Service configuration properties
service:
  annotations: {}

# nodeSelector -- Node labels for pod assignment
nodeSelector: {}

# tolerations -- Tolerations to influence platform pod assignment.
tolerations: []

# topologySpreadConstraints -- Spread constraints to influence platform pod assignment.
# https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
topologySpreadConstraints: []

# affinity -- Affinities to influence platform pod assignment.
affinity: {}


resources:
  requests:
    # resources.requests.memory -- The minimal amount of memory needed
    memory: "2Gi"
    # resources.requests.cpu -- The minimal amount of cpu shares needed
    cpu: "2000m"
  limits:
    # resources.limits.memory -- The limit of memory to be used
    memory: "4Gi"
    # resources.limits.cpu -- The limit of cpu share to be used during its interval
    cpu: "4000m"

# -----------------------------------------------------------------------------
# Postgres sub-chart parameters
# -----------------------------------------------------------------------------

# PostgreSQL chart documentation:
# https://github.com/bitnami/charts/blob/master/bitnami/postgresql/README.md

postgresql:
  enabled: true
  auth:
    username: steadybit
    database: steadybit
  image:
    tag: 15
  service:
    ports:
      postgresql: "5432"
